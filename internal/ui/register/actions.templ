package ui_register

import (
"fmt"

"scouts-risk/internal/icon"
"scouts-risk/internal/model"
"scouts-risk/internal/ui"

"github.com/labstack/echo/v4"
)

// Temporary approach to this obviously
// dest; location or event
templ Actions(dest string) {
<div class="px-4">
  @ui.HeadingHelp(model.HeadingHelp{
  Label: "Actions",
  Level: 3,
  Help: "Once you've done as much as you think is necessary (or possible) submit your assessment for review." +
  " Your group leader will receive a notification and will review as soon as possible.",
  })
  @actionsButtons(dest)
</div>
}

templ actionsButtons(dest string) {
<div class="py-1 flex flex-nowrap gap-1 items-center">
  <div class="w-2/5">
    @actionsButton(fmt.Sprintf("/risk/%s?toast=submit", dest), model.UiColourPrimary){
    @ui.PlainText("Submit for review")
    }
  </div>
  <div class="w-2/5">
    @actionsButton(fmt.Sprintf("/risk/%s?toast=save", dest), model.UiColourDefault){
    @ui.PlainText("Save for later")
    }
  </div>
  <div class="w-1/5">
    @actionsButton(fmt.Sprintf("/risk/%s?toast=delete", dest), model.UiColourError){
    @icon.XMark(templ.Attributes{"class": "w-5 h-5"})
    }
  </div>
</div>
}

templ actionsButton(url string, colour model.UiColour) {
@ui.Button[colour](templ.Attributes{
"x-on:click": fmt.Sprintf("window.open('%s', '_self')", url),
}){
{ children... }
}
}

templ ActionsToast(c echo.Context) {
if (c.QueryParam("toast") != "") {
switch c.QueryParam("toast") {
case "submit":
@ui.Toast(map[string]string{
"success": "Successfully submitted risk assessment",
})
case "save":
@ui.Toast(map[string]string{
"success": "Successfully saved risk assessment",
})
case "delete":
@ui.Toast(map[string]string{
"error": "Successfully deleted risk assessment",
})
}
}
}