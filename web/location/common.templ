package web_location

import (
"fmt"

"scouts-risk/web"
"scouts-risk/internal/model"
"scouts-risk/internal/ui"
"scouts-risk/internal/ui/register"
"scouts-risk/internal/fixtures"
)

templ Locations() {
@web.Base() {
{ children... }
}
}

templ LocationDescription(location model.Location) {
@ui_register.Description(ui_register.DescriptionData{
Label: location.Label,
ParentLabel: "Locations",
ParentUrl: "location",
}){
{ location.Description }
}
}

templ New(locType model.LocationType) {
<form hx-post="/api/risk/location/new" hx-trigger={fmt.Sprintf("click from:button#%s-new", locType)}
  hx-target="#event-locations-container" hx-swap="beforeend">
  <input type="hidden" name="type" value={ string(locType) } />
  <div class="w-full">
    @templateSelect(locType)
  </div>
  <div class="w-full">
    @ui.Input(model.Input{
    Name: "label",
    Attrs: templ.Attributes{"type": "text", "placeholder": "Add name..."},
    })
  </div>
</form>
<div class="py-1 flex flex-nowrap gap-1 items-center">
  <div class="w-1/2">
    @ui.Button[model.UiColourPrimary](
    templ.Attributes{
    "id": fmt.Sprintf("%s-new", locType),
    "x-on:click": fmt.Sprintf("%sNewOpen = false", locType),
    },
    ){
    @ui.PlainText("Add")
    }
  </div>
  <div class="w-1/2">
    @ui.Button[model.UiColourDefault](templ.Attributes{"x-on:click": fmt.Sprintf("%sNewOpen = false", locType)}){
    @ui.PlainText("Cancel")
    }
  </div>
</div>
}

templ templateSelect(locType model.LocationType) {
@ui.Select(
model.Select{
Name: "template",
Options: ui.OptionsFromLabels("Select template...", ui.ModelLabels(fixtures.LocTypeLocations(locType))),
},
)
}