package web

import (
"fmt"

"scouts-risk/internal/ui"
"scouts-risk/internal/icon"
"scouts-risk/internal/model"
"scouts-risk/internal/fixtures"
)

// ! UP TO
// ---* Add the controls here; label them with badges i.e. before event, during, response
// ---- NOPE do we also include the no / do / done buttons here? NOPE
// ---- NO but it would be nice to offer some of the more serious controls (for refusal or quick-add)
// ! REMOVE the hazards and controls accordion level for a single location
// - this way we can go straight from location to hazards, within which are controls
// - we'll come back to control check and responsibility allocation later
// * Allow for the creation of a control (via a modal)
// * Allow for the creation of hazards (via a modal)
// ! remove controls before, during, after for each location
// * Include a controls responsibility allocation step later
// - this might be for before, during, and after (OR as 3 separate steps)

templ EventRegister() {
@Events() {
<div>
  @EventDescription("Big event", "What fun we will have, when we all meet at this event")
  <h3>Locations and areas of note</h3>
  <p>We do the actual location last, as majority of hazards will be covered in the more specific areas.</p>
  @eventLocations()
  <h3>Activities</h3>
  // @eventActivities()
</div>
}
}

templ eventLocations() {
<div class="join join-vertical w-full">
  @ui.AccordionRow(model.Accordion{Label: "Tree House", Id: "event-location", Description: "", TitleBadges:
  []templ.Component{ui.AccordionRowTitleBadge(ui.PlainText("area"), "neutral"), ui.AccordionRowTitleBadge(icon.XMark(),
  "error")}}) {
  @locationHazards(fixtures.Locations["treeHouse"])
  }
  @ui.AccordionRow(model.Accordion{Label: "Bushy / forested area", Id: "event-location", Description: "", TitleBadges:
  []templ.Component{ui.AccordionRowTitleBadge(ui.PlainText("area"), "neutral"), ui.AccordionRowTitleBadge(icon.XMark(),
  "error")}}) {
  @locationHazards(fixtures.Locations["bushy"])
  }
  // @ui.AccordionRow(model.Accordion{Label: "Unfenced pool / dam", Id: "event-location", Description: "", TitleBadges:
  // []templ.Component{ui.AccordionRowTitleBadge(ui.PlainText("area"), "neutral"),
  // ui.AccordionRowTitleBadge(icon.XMark(),
  // "error")}}) {
  // @eventAspects()
  // }
  // @ui.AccordionRow(model.Accordion{Label: "Fenced pool / dam", Id: "event-location", Description: "", TitleBadges:
  // []templ.Component{ui.AccordionRowTitleBadge(ui.PlainText("area"), "neutral"),
  // ui.AccordionRowTitleBadge(icon.XMark(),
  // "error")}}) {
  // @eventAspects()
  // }
  @ui.AccordionRow(model.Accordion{
  Label: "Mac's property",
  Id: "event-location",
  Description: "",
  TitleBadges: []templ.Component{
  ui.AccordionRowTitleBadge(ui.PlainText("location"), "primary"),
  ui.AccordionRowTitleBadge(icon.XMark(),
  "error")}}) {
  @locationHazards(fixtures.Locations["macsPlace"])
  }
</div>
}

templ locationHazards(location model.Location) {
for _, h := range location.Hazards {
@ui.AccordionRow(model.Accordion{Label: h.Label, Id: "event-hazard", TitleBadges:
[]templ.Component{}}) {
@locationHazard(h)
}
}
<div class="w-full py-1">
  @hazardButtonNew(location.Id)
</div>
}

templ locationHazard(hazard model.Hazard) {
<div class="w-full">
  @hazardInputSeverity(hazard)
</div>
<h4>Controls</h4>
<div class="divide-y divide-dashed">
  for _, c := range hazard.Controls {
  @locationHazardControl(c)
  }
  @controlButtonNew(hazard.Id)
</div>
<div class="w-full">
  @hazardInputLikelihood(hazard)
</div>
}

templ locationHazardControl(control model.Control) {
<div class="flex flex-nowrap gap-1 items-center">
  <div class="flex-none w-fit">
    @ui.Checkbox(model.Checkbox{
    Label: "",
    Name: fmt.Sprintf("control-%s", control.Id),
    })
  </div>
  <div class="grow">
    { control.Label }
  </div>
  <div class="flex-none w-fit">
    @ui.ControlBadge[control.When]
  </div>
</div>
}

templ hazardInputSeverity(hazard model.Hazard) {
@ui.Select(
model.Select{
Label: "Hazard severity",
Name: fmt.Sprintf("hazard-severity-%s", hazard.Id),
Options: []model.SelectOption{
{Label: "Insignificant", Value: "insignificant"},
{Label: "Minor", Value: "minor"},
{Label: "Moderate", Value: "moderate"},
{Label: "Significant", Value: "significant"},
{Label: "Severe", Value: "severe"},
},
},
)
}

templ hazardInputLikelihood(hazard model.Hazard) {
@ui.Select(
model.Select{
Label: "Hazard likelihood (after selected controls)",
Name: fmt.Sprintf("hazard-likelihood-%s", hazard.Id),
Options: []model.SelectOption{
{Label: "Rare", Value: "rare"},
{Label: "Unlikely", Value: "unlikely"},
{Label: "Possible", Value: "possible"},
{Label: "Likely", Value: "likely"},
{Label: "Almost certain", Value: "almost-certain"},
},
},
)
}

templ hazardButtonNew(id string) {
@ui.Modal(fmt.Sprintf("hazardNew_%s", id), "Add missing hazard") {
@hazardInputNew()
}
}

templ hazardInputNew() {
<div class="w-full">
  @ui.Select(
  model.Select{
  Label: "If a hazard is missing",
  Name: "hazard-new-select",
  Options: []model.SelectOption{
  {Label: "Select ...", Disabled: true, Selected: true, Value: ""},
  {Label: "Other standard hazard", Value: "nah"},
  {Label: "Eventually replace this field", Value: "nah"},
  {Label: "With autocomplete", Value: "nah"},
  {Label: "Within text input", Value: "nah"},
  },
  },
  )
</div>
<div class="w-full">
  @ui.Input(model.Input{
  Name: "hazard-new",
  Attrs: templ.Attributes{"type": "text", "placeholder": "OR add new..."},
  })
</div>
}

templ controlButtonNew(id string) {
@ui.Modal(fmt.Sprintf("controlNew_%s", id), "Add missing control") {
@controlInputNew()
}
}

templ controlInputNew() {
<div class="w-full">
  @ui.Select(
  model.Select{
  Label: "If a control is missing",
  Name: "control-new-select",
  Options: []model.SelectOption{
  {Label: "Select ...", Disabled: true, Selected: true, Value: ""},
  {Label: "Other standard control", Value: "nah"},
  {Label: "Eventually replace this field", Value: "nah"},
  {Label: "With autocomplete", Value: "nah"},
  {Label: "Within text input", Value: "nah"},
  },
  },
  )
</div>
<div class="w-full">
  @ui.Input(model.Input{
  Name: "control-new",
  Attrs: templ.Attributes{"type": "text", "placeholder": "OR add new..."},
  })
</div>
}